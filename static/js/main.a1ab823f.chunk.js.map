{"version":3,"sources":["App.js","index.js"],"names":["App","View","useRef","stream","useState","user","setuser","videoDevices","navigator","mediaDevices","enumerateDevices","then","devices","forEach","device","console","log","kind","label","deviceId","push","onCl","getSupportedConstraints","capture","facingMode","options","audio","video","exact","getTracks","track","stop","getUserMedia","current","srcObject","alert","className","width","height","ref","autoPlay","playsInline","controls","muted","onClick","rootElement","document","getElementById","createRoot","render"],"mappings":"uMAGe,SAASA,IACtB,IAAIC,EAAOC,iBAAO,MAClBD,EAAOC,iBAAO,MACd,IAAIC,EAAS,KACb,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEIC,EAAe,GAEnBC,UAAUC,aAAaC,mBAAmBC,MAAK,SAACC,GAC9CA,EAAQC,SAAQ,SAAUC,GACxBC,QAAQC,IACNF,EAAOG,KAAO,KAAOH,EAAOI,MAAQ,SAAWJ,EAAOK,UAErC,cAAfL,EAAOG,MACTV,EAAaa,KAAKN,EAAOK,SAE5B,IACDJ,QAAQC,IAAIT,EACb,IACD,IAAMc,EAAO,WAEX,GADiBb,UAAUC,aAAaa,0BAC3B,WA6Bb,IAAa,IAATjB,EAAe,CACjB,IAAMkB,EAAO,iDAAG,WAAOC,GAAP,wFACRC,EAAU,CACdC,OAAO,EACPC,MAAO,CACLR,SAAU,CACRS,MAAOrB,EAAa,MALZ,SAYRJ,GACaA,EAAO0B,YACfhB,SAAQ,SAACiB,GAAD,OAAWA,EAAMC,MAAjB,IAdL,SAgBGvB,UAAUC,aAAauB,aAAaP,GAhBvC,OAgBZtB,EAhBY,OAmBZF,EAAKgC,QAAQC,UAAY/B,EAnBb,uDAqBZgC,MAAM,EAAD,IArBO,4EAAH,sDAyBbZ,IACAjB,GAAQ,EACT,KAAM,CAEL,IAAMiB,EAAO,iDAAG,WAAOC,GAAP,wFACRC,EAAU,CACdC,OAAO,EACPC,MAAO,CACLR,SAAU,CACRS,MAAOrB,EAAa,MALZ,SAYRJ,GACaA,EAAO0B,YACfhB,SAAQ,SAACiB,GAAD,OAAWA,EAAMC,MAAjB,IAdL,SAgBGvB,UAAUC,aAAauB,aAAaP,GAhBvC,OAgBZtB,EAhBY,OAmBZF,EAAKgC,QAAQC,UAAY/B,EAnBb,uDAqBZgC,MAAM,EAAD,IArBO,4EAAH,sDAyBbZ,IACAjB,GAAQ,EACT,MArFC6B,MAAM,yBAsFT,EACD,OACE,sBAAKC,UAAU,MAAf,UACE,uBACEC,MAAM,OACNC,OAAO,OAEPC,IAAKtC,EACLuC,UAAQ,EACRC,aAAW,EACXC,UAAQ,EACRC,OAAK,IAEP,wBAAQC,QAASvB,EAAjB,mBACA,wBAAQuB,QAASvB,EAAjB,oBAGL,CC3HD,IAAMwB,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAACjD,EAAD,M","file":"static/js/main.a1ab823f.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  var View = useRef(null);\n  View = useRef(null);\n  let stream = null;\n  const [user, setuser] = useState(true);\n\n  var videoDevices = [];\n  // var videoDeviceIndex = 0;\n  navigator.mediaDevices.enumerateDevices().then((devices) => {\n    devices.forEach(function (device) {\n      console.log(\n        device.kind + \": \" + device.label + \" id = \" + device.deviceId\n      );\n      if (device.kind == \"videoinput\") {\n        videoDevices.push(device.deviceId);\n      }\n    });\n    console.log(videoDevices);\n  });\n  const onCl = () => {\n    const supports = navigator.mediaDevices.getSupportedConstraints();\n    if (!supports[\"facingMode\"]) {\n      alert(\"Browser Not supported!\");\n      return;\n    }\n    // const capture = async (facingMode) => {\n    //   const options = {\n    //     audio: false,\n    //     video: {\n    //       deviceId: {\n    //         exact: videoDevices[0]\n    //       }\n    //       // facingMode\n    //     }\n    //   };\n\n    //   try {\n    //     if (stream) {\n    //       const tracks = stream.getTracks();\n    //       tracks.forEach((track) => track.stop());\n    //     }\n    //     stream = await navigator.mediaDevices.getUserMedia(options);\n    //     // stream = await navigator.mediaDevices.getUserMedia(constraints);\n    //     // stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n    //     View.current.srcObject = stream;\n    //   } catch (e) {\n    //     alert(e);\n    //     return;\n    //   }\n    // };\n    if (user === true) {\n      const capture = async (facingMode) => {\n        const options = {\n          audio: false,\n          video: {\n            deviceId: {\n              exact: videoDevices[0]\n            }\n            // facingMode\n          }\n        };\n\n        try {\n          if (stream) {\n            const tracks = stream.getTracks();\n            tracks.forEach((track) => track.stop());\n          }\n          stream = await navigator.mediaDevices.getUserMedia(options);\n          // stream = await navigator.mediaDevices.getUserMedia(constraints);\n          // stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n          View.current.srcObject = stream;\n        } catch (e) {\n          alert(e);\n          return;\n        }\n      };\n      capture();\n      setuser(false);\n    } else {\n      // capture(\"environment\");\n      const capture = async (facingMode) => {\n        const options = {\n          audio: false,\n          video: {\n            deviceId: {\n              exact: videoDevices[1]\n            }\n            // facingMode\n          }\n        };\n\n        try {\n          if (stream) {\n            const tracks = stream.getTracks();\n            tracks.forEach((track) => track.stop());\n          }\n          stream = await navigator.mediaDevices.getUserMedia(options);\n          // stream = await navigator.mediaDevices.getUserMedia(constraints);\n          // stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n          View.current.srcObject = stream;\n        } catch (e) {\n          alert(e);\n          return;\n        }\n      };\n      capture();\n      setuser(false);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <video\n        width=\"100%\"\n        height=\"100%\"\n        // className=\"output-view\"\n        ref={View}\n        autoPlay\n        playsInline\n        controls\n        muted\n      />\n      <button onClick={onCl}>front</button>\n      <button onClick={onCl}>back</button>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}